groups {
    re0 {
        system {
            host-name MX104-2-re0;
        }
        interfaces {
            fxp0 {
                unit 0 {
                    family inet {
                        address 10.255.6.223/24;
                        address 10.255.6.222/24 {
                            master-only;
                        }
                    }
                }
            }
        }
    }
    re1 {
        system {
            host-name MX104-2-re1;
        }
        interfaces {
            fxp0 {
                unit 0 {
                    family inet {
                        address 10.255.6.224/24;
                        address 10.255.6.222/24 {
                            master-only;
                        }
                    }
                }
            }
        }
    }
    per-interface-arp {
        interfaces {
            <*> {
                unit <*> {
                    family inet {
                        policer {
                            arp per_int_arp;
                        }
                    }
                }
            }
        }
    }
    syslog-server {
        system {
            syslog {
                host <*> {
                    any any;
                    interactive-commands any;
                    match "!(.*Monitor: Route Add Label.*)";
                    source-address 10.255.6.222;
                }
            }
        }
    }
}
apply-groups [ re0 re1 ];
system {
    backup-router 10.255.6.254;
    time-zone America/Puerto_Rico;
    authentication-order [ radius password ];
    root-authentication {
        encrypted-password "$1$YGQ69SVG$rkebQZrdofob2bnemY5r40"; ## SECRET-DATA
    }
    radius-server {
        196.12.161.18 {
            port 1812;
            accounting-port 1813;
            secret "$9$d/b2oJZj.PQNd.PTQ/9Ap0O1hW87w2a7-"; ## SECRET-DATA
            source-address 10.255.6.222;
        }
        196.12.161.19 {
            port 1812;
            accounting-port 1813;
            secret "$9$d/b2oJZj.PQNd.PTQ/9Ap0O1hW87w2a7-"; ## SECRET-DATA
            source-address 10.255.6.222;
        }
    }
    login {
        class super-user-local {
            idle-timeout 10;
        }
        class superoperator {
            idle-timeout 16;
            login-tip;
        }
        user admin {
            uid 2010;
            class super-user;
            authentication {
                encrypted-password "$5$M/c1iXza$fmJpj2Ir/1KfVwo6TQXgOVgcx65qsgYJ7cqVe6O7FuD"; ## SECRET-DATA
            }
        }
        user r-oper {
            uid 2003;
            class operator;
        }
        user r-superoper {
            uid 2005;
            class superoperator;
        }
        user r-superuser {
            uid 2004;
            class super-user;
        }
    }
    services {
        ftp;
        ssh;
        telnet;
        netconf {
            ssh;
        }
    }
    syslog {
        user * {
            any emergency;
        }
        host 196.12.161.35 {
            apply-groups syslog-server;
        }
        host 196.12.161.39 {
            apply-groups syslog-server;
        }
        host 10.255.6.56 {
            apply-groups syslog-server;
        }
        host 10.255.6.76 {
            apply-groups syslog-server;
            port 139;
        }
        file messages {
            any critical;
            authorization info;
            kernel info;
        }
        file interactive-commands {
            interactive-commands error;
        }
        file secure {
            authorization info;
            security any;
        }
        file ftp {
            ftp any;
        }
    }
    archival {
        configuration {
            transfer-on-commit;
            archive-sites {
                "ftp://juniper@10.255.6.25/MOP" password "$9$j.kmT69pRhrAtK87NbwmfTzFn"; ## SECRET-DATA
            }
        }
    }
    commit synchronize;
    ntp {
        server 10.255.6.11;
        server 10.255.6.12;
    }
}
chassis {
    redundancy {
        routing-engine 0 master;
        routing-engine 1 backup;
        failover {
            on-loss-of-keepalives;
            on-disk-failure;
        }
        graceful-switchover;
    }
    aggregated-devices {
        ethernet {
            device-count 6;
        }
    }
    fpc 0 {
        pic 0 {
            tunnel-services {
                bandwidth 10g;
            }
        }
    }
    fpc 1 {
        pic 0 {
            adaptive-services {
                service-package layer-3;
            }
        }
        pic 1 {
            adaptive-services {
                service-package layer-3;
            }
        }
    }
    network-services all-ethernet;
}
interfaces {
    xe-1/0/0 {
        description BB1-XE-0/1/0;
    }
    xe-1/2/0 {
        description Uplink-To-Liberty;
    }
}
snmp {
    location "Metro Office Park";
    contact "Worldnet NOC 787-705-5500";
    community "c4ct1!" {
        authorization read-only;
    }
    trap-group NMS {
        version v2;
        categories {
            authentication;
            chassis;
            link;
            remote-operations;
            routing;
        }
    }
}
routing-options {
    static {
        route 192.168.253.0/24 next-hop 10.255.6.254;
        route 196.12.161.18/32 next-hop 10.255.6.254;
        route 196.12.161.19/32 next-hop 10.255.6.254;
    }
}
policy-options {
    prefix-list administration-addresses {
        10.255.6.20/32;
        10.255.6.24/32;
        10.255.6.38/32;
        10.255.6.253/32;
        70.45.0.0/16;
        70.45.200.199/32;
        192.168.0.0/16;
        192.168.90.17/32;
        192.168.253.0/24;
        196.12.161.28/32;
        196.12.170.52/30;
    }
    prefix-list radius-servers {
        196.12.161.18/32;
        196.12.161.19/32;
    }
    prefix-list snmp-servers {
        10.255.6.20/32;
        10.255.6.21/32;
        10.255.6.24/32;
        10.255.6.25/32;
        10.255.6.56/32;
        10.255.6.57/32;
        10.255.6.90/32;
        10.255.6.98/32;
        192.168.90.22/32;
        192.168.90.23/32;
        196.12.161.10/32;
        196.12.161.52/32;
        196.12.161.53/32;
        196.12.161.54/32;
        196.12.161.56/32;
    }
    prefix-list ntp-servers {
        10.240.0.4/32;
        192.168.90.20/32;
        192.168.90.21/32;
        192.168.90.252/32;
    }
    prefix-list ftp-servers {
        10.255.6.25/32;
        192.168.90.25/32;
        192.168.253.0/24;
    }
    prefix-list worldnet-addresses {
        64.89.0.0/20;
        196.12.160.0/19;
        196.12.188.128/29;
    }
    prefix-list smtp-authorized-clients {
        196.12.185.27/32;
    }
    prefix-list smtp-authorized-servers {
        196.12.161.6/32;
        196.12.161.13/32;
        196.12.161.14/32;
        196.12.161.40/32;
        196.12.161.46/32;
    }
    prefix-list ntp-allowed {
        64.89.10.160/30;
        74.85.156.0/23;
        192.254.110.0/24;
        196.12.161.0/32;
        196.12.161.4/32;
        196.12.161.5/32;
        196.12.166.0/24;
        196.12.188.48/30;
    }
    prefix-list backbone-addresses {
        10.255.252.0/24;
        172.30.255.0/32;
        172.30.255.1/32;
        192.168.0.0/16;
    }
    prefix-list bgp-neighbors {
        89.221.40.6/32;
        196.12.162.229/32;
        196.12.170.53/32;
        196.12.170.128/30;
        209.91.216.141/32;
    }
    prefix-list bgp-neighbors-v6 {
        2001:41a8:4080:2::0/126;
    }
}
firewall {
    family inet {
        filter protect-RE {
            term remote-adm {
                from {
                    source-prefix-list {
                        administration-addresses;
                    }
                    protocol tcp;
                    destination-port [ snmp telnet ssh ];
                }
                then {
                    count tcp-counter;
                    accept;
                }
            }
            term snmp {
                from {
                    source-prefix-list {
                        snmp-servers;
                    }
                    protocol udp;
                    destination-port 161;
                }
                then accept;
            }
            term backbone-bfd {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol udp;
                    port 3784;
                }
                then accept;
            }
            term backbone-lsp-ping {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol [ tcp udp ];
                    port 3503;
                }
                then accept;
            }
            term backbone-ldp {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol [ udp tcp ];
                    port ldp;
                }
                then accept;
            }
            term backbone-rsvp {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol rsvp;
                }
                then accept;
            }
            term backbone-ospf {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol ospf;
                }
                then accept;
            }
            term backbone-bgp {
                from {
                    source-prefix-list {
                        backbone-addresses;
                    }
                    protocol tcp;
                    port bgp;
                }
                then accept;
            }
            term bgp-neighbors {
                from {
                    source-prefix-list {
                        bgp-neighbors;
                    }
                    protocol tcp;
                    port bgp;
                }
                then accept;
            }
            term sampled {
                from {
                    port 6153;
                }
                then accept;
            }
            term radius-servers {
                from {
                    source-prefix-list {
                        radius-servers;
                    }
                    protocol udp;
                }
            }
            term worldnet-icmp {
                from {
                    icmp-type [ echo-request echo-reply unreachable time-exceeded ];
                }
                then accept;
            }
            term traceroute {
                from {
                    protocol udp;
                    destination-port 33434-33523;
                }
                then {
                    policer icmp-policer;
                    count traceroute-counter;
                    accept;
                }
            }
            term drop-any {
                then {
                    count protectRE-dropany;
                    log;
                    discard;
                }
            }
            term icmp {
                from {
                    protocol icmp;
                    icmp-type [ echo-request echo-reply unreachable time-exceeded ];
                }
                then {
                    policer icmp-policer;
                    count icmp-counter;
                    accept;
                }
            }
        }
        filter block_ntp {
            term ntp_allow {
                from {
                    destination-prefix-list {
                        ntp-allowed;
                    }
                }
                then {
                    count ntp_allow_count;
                    accept;
                }
            }
            term ntp {
                from {
                    protocol udp;
                    destination-port ntp;
                }
                then {
                    count ntp_block_count;
                    reject;
                }
            }
            term any {
                then accept;
            }
        }
    }
    policer icmp-policer {
        if-exceeding {
            bandwidth-limit 1m;
            burst-size-limit 15k;
        }
        then discard;
    }
    policer 30000k {
        if-exceeding {
            bandwidth-limit 30m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 12000k {
        if-exceeding {
            bandwidth-limit 12m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 10000k {
        if-exceeding {
            bandwidth-limit 10m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 50000k {
        if-exceeding {
            bandwidth-limit 50m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer arp_ae0_3 {
        if-exceeding {
            bandwidth-limit 1m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer per_int_arp {
        if-exceeding {
            bandwidth-limit 150k;
            burst-size-limit 15k;
        }
        then discard;
    }
    policer 75m {
        if-exceeding {
            bandwidth-limit 75m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 50m {
        if-exceeding {
            bandwidth-limit 50m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 20000k {
        if-exceeding {
            bandwidth-limit 20m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 200000k {
        if-exceeding {
            bandwidth-limit 200m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 100000k {
        if-exceeding {
            bandwidth-limit 100m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1000k {
        if-exceeding {
            bandwidth-limit 1m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 100k {
        if-exceeding {
            bandwidth-limit 100k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1024k {
        if-exceeding {
            bandwidth-limit 1024000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 10Mbps {
        if-exceeding {
            bandwidth-limit 10m;
            burst-size-limit 15k;
        }
        then discard;
    }
    policer 110000k {
        if-exceeding {
            bandwidth-limit 150m;
            burst-size-limit 150k;
        }
        then discard;
    }
    policer 1112k {
        if-exceeding {
            bandwidth-limit 1112000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1156k {
        if-exceeding {
            bandwidth-limit 1156000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1200k {
        if-exceeding {
            bandwidth-limit 1200000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1280k {
        if-exceeding {
            bandwidth-limit 1280000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 128k {
        if-exceeding {
            bandwidth-limit 128k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 13000k {
        if-exceeding {
            bandwidth-limit 13m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1408k {
        if-exceeding {
            bandwidth-limit 1408000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 150000k {
        if-exceeding {
            bandwidth-limit 150m;
            burst-size-limit 150k;
        }
        then discard;
    }
    policer 15000k {
        if-exceeding {
            bandwidth-limit 15m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1504k {
        if-exceeding {
            bandwidth-limit 1504000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 1536k {
        if-exceeding {
            bandwidth-limit 1536000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 2000k {
        if-exceeding {
            bandwidth-limit 2m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 200k {
        if-exceeding {
            bandwidth-limit 200k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 2048k {
        if-exceeding {
            bandwidth-limit 2048000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 25000k {
        if-exceeding {
            bandwidth-limit 25m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 256k {
        if-exceeding {
            bandwidth-limit 256k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 26000k {
        if-exceeding {
            bandwidth-limit 26m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 3000k {
        if-exceeding {
            bandwidth-limit 3m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 300k {
        if-exceeding {
            bandwidth-limit 300k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 3072k {
        if-exceeding {
            bandwidth-limit 3072000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 33000k {
        if-exceeding {
            bandwidth-limit 33m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 384k {
        if-exceeding {
            bandwidth-limit 384k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 4096k {
        if-exceeding {
            bandwidth-limit 4096000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 4608k {
        if-exceeding {
            bandwidth-limit 4608000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 5000k {
        if-exceeding {
            bandwidth-limit 5m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 512k {
        if-exceeding {
            bandwidth-limit 512k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 6000k {
        if-exceeding {
            bandwidth-limit 6m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 6144k {
        if-exceeding {
            bandwidth-limit 6144000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 768k {
        if-exceeding {
            bandwidth-limit 768k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 8000k {
        if-exceeding {
            bandwidth-limit 8m;
            burst-size-limit 1536000;
        }
        then discard;
    }
    policer 8192k {
        if-exceeding {
            bandwidth-limit 8192000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer arp_mpls {
        if-exceeding {
            bandwidth-limit 1m;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer fr-class-ef {
        if-exceeding {
            bandwidth-percent 1;
            burst-size-limit 1500;
        }
        then {
            loss-priority low;
            forwarding-class expedited-forwarding;
        }
    }
    policer ubr-1024k {
        if-exceeding {
            bandwidth-limit 1024000;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer ubr-1536k {
        if-exceeding {
            bandwidth-limit 1536000;
            burst-size-limit 155k;
        }
        then discard;
    }
    policer ubr-512k {
        if-exceeding {
            bandwidth-limit 512k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer ubr-768k {
        if-exceeding {
            bandwidth-limit 768k;
            burst-size-limit 100k;
        }
        then discard;
    }
    policer 152000k {
        if-exceeding {
            bandwidth-limit 152m;
            burst-size-limit 152k;
        }
        then discard;
    }
    filter 30000k {
        interface-specific;
        term policer {
            then policer 30000k;
        }
    }
    filter 12000k {
        interface-specific;
        term policer {
            then policer 12000k;
        }
    }
    filter 10000k {
        interface-specific;
        term policer {
            then policer 10000k;
        }
    }
    filter 50000k {
        interface-specific;
        term policer {
            then policer 50000k;
        }
    }
    filter 20000k {
        interface-specific;
        term policer {
            then policer 20000k;
        }
    }
    filter 100000k {
        interface-specific;
        term policer {
            then policer 100000k;
        }
    }
    filter 1000k {
        interface-specific;
        term policer {
            then policer 1000k;
        }
    }
    filter 1024k {
        interface-specific;
        term policer {
            then policer 1024k;
        }
    }
    filter 110000k {
        interface-specific;
        term policer {
            then policer 110000k;
        }
    }
    filter 1112k {
        interface-specific;
        term policer {
            then policer 1112k;
        }
    }
    filter 1156k {
        interface-specific;
        term policer {
            then policer 1156k;
        }
    }
    filter 1200k {
        interface-specific;
        term policer {
            then policer 1200k;
        }
    }
    filter 1280k {
        interface-specific;
        term policer {
            then policer 1280k;
        }
    }
    filter 128k {
        interface-specific;
        term policer {
            then policer 128k;
        }
    }
    filter 13000k {
        interface-specific;
        term policer {
            then policer 13000k;
        }
    }
    filter 1408k {
        interface-specific;
        term policer {
            then policer 1408k;
        }
    }
    filter 150000k {
        interface-specific;
        term policer {
            then policer 150000k;
        }
    }
    filter 15000k {
        interface-specific;
        term policer {
            then policer 15000k;
        }
    }
    filter 1504k {
        interface-specific;
        term policer {
            then policer 1504k;
        }
    }
    filter 1536k {
        interface-specific;
        term policer {
            then policer 1536k;
        }
    }
    filter 200000k {
        interface-specific;
        term policer {
            then policer 200000k;
        }
    }
    filter 2000k {
        interface-specific;
        term policer {
            then policer 2000k;
        }
    }
    filter 200k {
        interface-specific;
        term policer {
            then policer 200k;
        }
    }
    filter 2048k {
        interface-specific;
        term policer {
            then policer 2048k;
        }
    }
    filter 25000k {
        interface-specific;
        term policer {
            then policer 25000k;
        }
    }
    filter 256k {
        interface-specific;
        term policer {
            then policer 256k;
        }
    }
    filter 26000k {
        interface-specific;
        term policer {
            then policer 26000k;
        }
    }
    filter 3000k {
        interface-specific;
        term policer {
            then policer 3000k;
        }
    }
    filter 300k {
        interface-specific;
        term policer {
            then policer 300k;
        }
    }
    filter 3072k {
        interface-specific;
        term policer {
            then policer 3072k;
        }
    }
    filter 33000k {
        interface-specific;
        term policer {
            then policer 33000k;
        }
    }
    filter 384k {
        interface-specific;
        term policer {
            then policer 384k;
        }
    }
    filter 4096k {
        interface-specific;
        term policer {
            then policer 4096k;
        }
    }
    filter 4608k {
        interface-specific;
        term policer {
            then policer 4608k;
        }
    }
    filter 5000k {
        interface-specific;
        term policer {
            then policer 5000k;
        }
    }
    filter 512k {
        interface-specific;
        term policer {
            then policer 512k;
        }
    }
    filter 6000k {
        interface-specific;
        term policer {
            then policer 6000k;
        }
    }
    filter 6144k {
        interface-specific;
        term policer {
            then policer 6144k;
        }
    }
    filter 768k {
        interface-specific;
        term policer {
            then policer 768k;
        }
    }
    filter 8000k {
        interface-specific;
        term policer {
            then policer 8000k;
        }
    }
    filter 8192k {
        interface-specific;
        term policer {
            then policer 8192k;
        }
    }
    filter pppoeradius {
        term 1 {
            from {
                protocol udp;
                port 1645;
            }
            then {
                port-mirror;
                accept;
            }
        }
        term 2 {
            then accept;
        }
    }
    filter ubr-1024k {
        interface-specific;
        term policer {
            then policer ubr-1024k;
        }
    }
    filter ubr-512k {
        interface-specific;
        term policer {
            then policer ubr-512k;
        }
    }
    filter ubr-768k {
        interface-specific;
        term policer {
            then policer ubr-768k;
        }
    }
    filter radius {
        term 1 {
            from {
                protocol udp;
                port 1812;
            }
            then accept;
        }
    }
    filter 152000k {
        term policer {
            then policer 152000k;
        }
    }
}


